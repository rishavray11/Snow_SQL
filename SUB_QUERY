-- ASSIGNING THE ACCOUNT TYPE 
USE ROLE ACCOUNTADMIN;

-- USING THE WAREHOUSE AVAILABLE
USE WAREHOUSE COMPUTE_WH;

-- CREATING A DATABASE NAMED AS SUBQUERIES_DATABASE
CREATE DATABASE IF NOT EXISTS subqueries_db;

-- USING THE DATABASE CREATED
USE DATABASE subqueries_db;

-- CREATING A SCHEMA NAMED AS SUBQUERIES_SCHEMA
CREATE SCHEMA IF NOT EXISTS subqueries_SCHEMA;

-- USING THE SCHEMA CREATED 
USE SCHEMA subqueries_SCHEMA;

-- Practice Questions 
-- Question 1
/*
    Table:
        Activity(machine_id, process_id, activity_type, timestamp)
        activity_type is either 'start' or 'end'
        Each (machine_id, process_id) has one 'start' and one 'end'.
    Task:
        Find the average processing time for each machine:
            'end' timestamp - 'start' timestamp for each process.
    Return machine_id and processing_time (rounded to 3 decimal places) for each machine.
*/
SELECT * FROM MACHINE_ACTIVITY;
SELECT 
    MACHINE_ID,
    ROUND(AVG(PROCESSING_TIME),3)AS average_processing_time
FROM
(
    SELECT
        MACHINE_ID,PROCESS_ID,
        (MAX(CASE WHEN ACTIVITY_TYPE='end' THEN TIMESTAMP END)-
         MIN(CASE WHEN ACTIVITY_TYPE='start' THEN TIMESTAMP END)) AS PROCESSING_TIME
    FROM MACHINE_ACTIVITY
    GROUP BY MACHINE_ID,PROCESS_ID
)
GROUP BY MACHINE_ID;
----------------------------------2
SELECT 
        MACHINE_ID,
        AVG(MAX_TIME) AS AVG_PROCESS_TIME
FROM
        (
        SELECT 
            MACHINE_ID,
            PROCESS_ID,
            ACTIVITY_TYPE,
            TIMESTAMP,
            LEAD(TIMESTAMP) OVER (PARTITION BY MACHINE_ID,PROCESS_ID ORDER BY TIMESTAMP ASC)-TIMESTAMP AS MAX_TIME,
        FROM MACHINE_ACTIVITY
        ORDER BY MACHINE_ID ASC
        )
GROUP BY MACHINE_ID;


---------------------------------------3
SELECT 
    T1.MACHINE_ID,
  ROUND(AVG(T1.TIMESTAMP-T2.TIMESTAMP),3) AS PROCESS_TIME
--     ROUND(SUM(T1.TIMESTAMP-T2.TIMESTAMP)/COUNT(T1.MACHINE_ID),2) AS PROCESS
FROM 
        MACHINE_ACTIVITY AS T1
    CROSS JOIN 
        MACHINE_ACTIVITY AS T2
WHERE T1.MACHINE_ID=T2.MACHINE_ID
     AND T1.PROCESS_ID=T2.PROCESS_ID
     AND T1.ACTIVITY_TYPE='end'
     AND T2.ACTIVITY_TYPE='start'
GROUP BY T1.MACHINE_ID
ORDER BY T1.MACHINE_ID ASC;

SELECT*
FROM MACHINE_ACTIVITY;
-----------------------------------------------------------------------------------------------------------------------------------------------------

-- Creating table named as machine_activity
CREATE OR REPLACE TABLE machine_activity (
    machine_id INT,
    process_id INT,
    activity_type VARCHAR(10),
    timestamp DECIMAL(6,3)
);

-- Inserting data into the table 
INSERT INTO machine_activity (machine_id, process_id, activity_type, timestamp) VALUES
(0, 0, 'start', 0.712),
(0, 0, 'end', 1.520),
(0, 1, 'start', 3.140),
(0, 1, 'end', 4.120),
(1, 0, 'start', 0.550),
(1, 0, 'end', 1.550),
(1, 1, 'start', 0.430),
(1, 1, 'end', 1.420),
(2, 0, 'start', 4.100),
(2, 0, 'end', 4.512),
(2, 1, 'start', 2.500),
(2, 1, 'end', 5.000);

-- Write the solution here






-- SUBQUERIES 
-- CREATING THE TABLE CUSTOMERS
CREATE TABLE CUSTOMERS (
    CUSTOMER_ID INT PRIMARY KEY,
    CUSTOMER_NAME VARCHAR(100),
    CITY VARCHAR(50),
    COUNTRY VARCHAR(50),
    JOINED_DATE DATE
);

-- CREATING THE TABLE ORDERS
CREATE TABLE ORDERS (
    ORDER_ID INT PRIMARY KEY,
    CUSTOMER_ID INT,
    PRODUCT_ID INT,
    ORDER_DATE DATE,
    SHIP_DATE DATE,
    QUANTITY INT,
    FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMERS(CUSTOMER_ID)
);

-- CREATING THE TABLE PRODUCTS
CREATE TABLE PRODUCTS (
    PRODUCT_ID INT PRIMARY KEY,
    PRODUCT_NAME VARCHAR(100),
    CATEGORY VARCHAR(50),
    UNIT_PRICE DECIMAL(10, 2)
);

-- INSERTING VALUES INTO THE CUSTOMERS TABLE 
INSERT INTO CUSTOMERS (CUSTOMER_ID, CUSTOMER_NAME, CITY, COUNTRY, JOINED_DATE) VALUES
(1, 'John Doe', 'Toronto', 'Canada', '2022-01-15'),
(2, 'Jane Smith', 'New York', 'USA', '2021-03-22'),
(3, 'Carlos Lopez', 'Mexico City', 'Mexico', '2023-05-10'),
(4, 'Sophia Patel', 'London', 'UK', '2021-11-19'),
(5, 'Ahmed Khan', 'Mumbai', 'India', '2022-09-30'),
(6, 'Emily Johnson', 'Los Angeles', 'USA', '2022-05-05'),
(7, 'James Lee', 'Sydney', 'Australia', '2023-01-20'),
(8, 'Emma Wilson', 'Vancouver', 'Canada', '2021-08-14'),
(9, 'Mohammed Ali', 'Dubai', 'UAE', '2022-04-11'),
(10, 'Liu Wei', 'Beijing', 'China', '2021-12-28'),
(11, 'Olivia Brown', 'Melbourne', 'Australia', '2023-03-30'),
(12, 'Isabella Martinez', 'Madrid', 'Spain', '2022-07-25'),
(13, 'Liam Evans', 'Auckland', 'New Zealand', '2021-09-17'),
(14, 'Hannah Williams', 'Chicago', 'USA', '2022-02-18'),
(15, 'Arjun Gupta', 'Delhi', 'India', '2023-06-12'),
(16, 'Lucas Kim', 'Seoul', 'South Korea', '2021-10-21'),
(17, 'Eva Garcia', 'Barcelona', 'Spain', '2022-08-07'),
(18, 'David Thompson', 'Houston', 'USA', '2023-07-02'),
(19, 'Ava Adams', 'Boston', 'USA', '2021-11-30'),
(20, 'Noah Clark', 'San Francisco', 'USA', '2022-03-19'),
(21, 'Chloe Robinson', 'Paris', 'France', '2022-12-01'),
(22, 'Mia Turner', 'Rome', 'Italy', '2021-05-22'),
(23, 'Elijah Harris', 'Berlin', 'Germany', '2023-04-18'),
(24, 'Zara Ahmed', 'Cairo', 'Egypt', '2022-06-03'),
(25, 'William King', 'Dublin', 'Ireland', '2021-07-11'),
(26, 'Sophia Lee', 'Tokyo', 'Japan', '2023-08-29'),
(27, 'Benjamin Scott', 'Edinburgh', 'UK', '2021-01-08'),
(28, 'Lucas Anderson', 'Stockholm', 'Sweden', '2022-10-14'),
(29, 'Isla Perez', 'Buenos Aires', 'Argentina', '2023-02-25'),
(30, 'Ryan Baker', 'Cape Town', 'South Africa', '2021-09-05');

-- INSERTING THE VALUES INTO THE ORDERS TABLE
INSERT INTO ORDERS (ORDER_ID, CUSTOMER_ID, PRODUCT_ID, ORDER_DATE, SHIP_DATE, QUANTITY)
VALUES
(1, 1, 101, '2024-01-01', '2024-01-05', 10),
(2, 2, 102, '2024-01-03', '2024-01-06', 5),
(3, 3, 103, '2024-01-05', '2024-01-10', 8),
(4, 4, 104, '2024-01-07', '2024-01-12', 3),
(5, 5, 105, '2024-01-10', '2024-01-15', 12),
(6, 6, 106, '2024-01-12', '2024-01-17', 20),
(7, 7, 107, '2024-01-14', '2024-01-18', 6),
(8, 8, 108, '2024-01-17', '2024-01-22', 15),
(9, 9, 109, '2024-01-18', '2024-01-23', 9),
(10, 10, 110, '2024-01-20', '2024-01-25', 18),
(11, 11, 111, '2024-01-23', '2024-01-28', 11),
(12, 12, 112, '2024-01-25', '2024-01-29', 7),
(13, 13, 113, '2024-01-27', '2024-02-01', 16),
(14, 14, 114, '2024-01-29', '2024-02-03', 4),
(15, 15, 115, '2024-01-31', '2024-02-05', 19),
(16, 16, 116, '2024-02-02', '2024-02-07', 6),
(17, 17, 117, '2024-02-04', '2024-02-08', 14),
(18, 18, 118, '2024-02-06', '2024-02-10', 9),
(19, 19, 119, '2024-02-08', '2024-02-13', 21),
(20, 20, 120, '2024-02-10', '2024-02-15', 17),
(21, 1, 101, '2024-02-12', '2024-02-17', 5),
(22, 2, 102, '2024-02-14', '2024-02-19', 7),
(23, 3, 103, '2024-02-15', '2024-02-21', 3),
(24, 4, 104, '2024-02-17', '2024-02-22', 11),
(25, 5, 105, '2024-02-18', '2024-02-23', 9),
(26, 6, 106, '2024-02-19', '2024-02-24', 10),
(27, 7, 107, '2024-02-20', '2024-02-25', 6),
(28, 8, 108, '2024-02-21', '2024-02-26', 15),
(29, 9, 109, '2024-02-22', '2024-02-27', 12),
(30, 10, 110, '2024-02-23', '2024-02-28', 18),
(31, 11, 111, '2024-02-24', '2024-03-01', 5),
(32, 12, 112, '2024-02-25', '2024-03-02', 14),
(33, 13, 113, '2024-02-26', '2024-03-03', 8),
(34, 14, 114, '2024-02-27', '2024-03-04', 16),
(35, 15, 115, '2024-02-28', '2024-03-05', 13),
(36, 16, 116, '2024-03-01', '2024-03-06', 20),
(37, 17, 117, '2024-03-02', '2024-03-07', 9),
(38, 18, 118, '2024-03-03', '2024-03-08', 4),
(39, 19, 119, '2024-03-04', '2024-03-09', 21),
(40, 20, 120, '2024-03-05', '2024-03-10', 18),
(41, 1, 101, '2024-03-06', '2024-03-11', 7),
(42, 2, 102, '2024-03-07', '2024-03-12', 11),
(43, 3, 103, '2024-03-08', '2024-03-13', 10),
(44, 4, 104, '2024-03-09', '2024-03-14', 15),
(45, 5, 105, '2024-03-10', '2024-03-15', 17),
(46, 6, 106, '2024-03-11', '2024-03-16', 13),
(47, 7, 107, '2024-03-12', '2024-03-17', 6),
(48, 8, 108, '2024-03-13', '2024-03-18', 9),
(49, 9, 109, '2024-03-14', '2024-03-19', 20),
(50, 10, 110, '2024-03-15', '2024-03-20', 12);

-- INSERTING VALUES INTO THE PRODUCTS TABLE
INSERT INTO PRODUCTS (PRODUCT_ID, PRODUCT_NAME, CATEGORY, UNIT_PRICE)
VALUES
(101, 'Laptop', 'Electronics', 800.00),
(102, 'Smartphone', 'Electronics', 600.00),
(103, 'Tablet', 'Electronics', 300.00),
(104, 'Headphones', 'Accessories', 50.00),
(105, 'Keyboard', 'Accessories', 30.00),
(106, 'Mouse', 'Accessories', 25.00),
(107, 'Smartwatch', 'Wearables', 200.00),
(108, 'Monitor', 'Electronics', 250.00),
(109, 'External Hard Drive', 'Storage', 100.00),
(110, 'USB-C Hub', 'Accessories', 20.00),
(111, 'Gaming Console', 'Gaming', 400.00),
(112, 'Router', 'Networking', 60.00),
(113, 'Bluetooth Speaker', 'Audio', 80.00),
(114, 'VR Headset', 'Gaming', 350.00),
(115, 'Smart Glasses', 'Wearables', 500.00),
(116, 'Action Camera', 'Cameras', 300.00),
(117, 'Drone', 'Cameras', 600.00),
(118, 'Smart Light Bulb', 'Home Automation', 40.00),
(119, 'Electric Kettle', 'Home Appliances', 35.00),
(120, 'Air Fryer', 'Home Appliances', 120.00),
(121, 'Fitness Tracker', 'Wearables', 150.00),
(122, 'Portable Projector', 'Home Entertainment', 450.00),
(123, 'Wireless Charger', 'Accessories', 25.00);
SELECT * FROM PRODUCTS;
SELECT * FROM ORDERS;
SELECT * FROM CUSTOMERS;

-- STARTING WITH QUERIES
--WRITE A SUB QUERY TO RETURN THE CUSTOMERS WHO HAVE PLACED MORE THAN 1 ORDER
SELECT CUSTOMER_NAME,CITY
FROM CUSTOMERS
WHERE CUSTOMER_ID IN (
    SELECT DISTINCT CUSTOMER_ID
    FROM ORDERS
    WHERE QUANTITY>=1);
    
--USING JOIN
SELECT DISTINCT C.CUSTOMER_NAME,C.CITY
FROM CUSTOMERS AS C INNER JOIN 
ORDERS AS O ON C.CUSTOMER_ID=O.CUSTOMER_ID
;

--FIND THE PRODUCTS THAT HAVE A TOTAL SALES QUANTITY GREATER THAN AVG SALES QUANTITY ACROSS ALL PRODUCTS
SELECT
    PRODUCT_NAME
FROM PRODUCTS
WHERE PRODUCT_ID IN(
        SELECT 
            PRODUCT_ID
        FROM ORDERS
        GROUP BY PRODUCT_ID
        HAVING SUM(QUANTITY)>(
            SELECT AVG(TOTAL_QTY)
            FROM(
                 SELECT 
                    PRODUCT_ID,
                     SUM(QUANTITY) AS TOTAL_QTY
                 FROM ORDERS
                 GROUP BY PRODUCT_ID)
));
-------
SELECT
    PRODUCT_ID,
    SUM(QUANTITY)
FROM ORDERS
GROUP BY PRODUCT_ID
HAVING SUM(QUANTITY)>(
    SELECT 
        AVG(TOTAL_QTY)
    FROM (
        SELECT
            PRODUCT_ID,
            SUM(QUANTITY) AS TOTAL_QTY
        FROM ORDERS
        GROUP BY PRODUCT_ID
    )
);

--Find the product(s) that have been ordered by the customer who has placed the highest total quantity of orders.
SELECT PRODUCT_NAME
FROM PRODUCTS 
WHERE PRODUCT_ID IN (
    SELECT PRODUCT_ID 
    FROM ORDERS
    GROUP BY PRODUCT_ID
    ORDER BY SUM(QUANTITY) DESC
    LIMIT 1
);
SELECT *
FROM PRODUCTS
WHERE PRODUCT_ID IN
(
    SELECT PRODUCT_ID
    FROM ORDERS AS T1
    INNER JOIN(
        SELECT CUSTOMER_ID,SUM(QUANTITY) AS TOTAL_QTY
        FROM ORDERS
        GROUP BY CUSTOMER_ID
        ORDER BY TOTAL_QTY DESC
        LIMIT 1) AS T2
    ON T1.CUSTOMER_ID=T2.CUSTOMER_ID)
    ;









SELECT PRODUCT_NAME,PRODUCT_ID
FROM PRODUCTS
WHERE PRODUCT_ID = (SELECT PRODUCT_ID
FROM ORDERS AS O INNER JOIN
CUSTOMERS AS C ON 
O.CUSTOMER_ID=C.CUSTOMER_ID
GROUP BY PRODUCT_ID
ORDER BY SUM(QUANTITY) DESC
LIMIT 1);

SELECT DISTINCT PRODUCT_NAME
FROM PRODUCTS AS P
INNER JOIN
ORDERS AS O ON P.PRODUCT_ID=O.PRODUCT_ID
WHERE CUSTOMER_ID IN (SELECT CUSTOMER_ID
FROM ORDERS
GROUP BY CUSTOMER_ID
ORDER BY SUM(QUANTITY)DESC
LIMIT 1);

--LIST ALL THE CUSTOMERS WHO HAVE ORDERD AT LEAST ONE PRODUCT FROM THE CATEGORY 'WEARABLES'
SELECT CUSTOMER_NAME
FROM CUSTOMERS
WHERE CUSTOMER_ID IN (
    SELECT CUSTOMER_ID
    FROM ORDERS
    WHERE PRODUCT_ID IN (
        SELECT PRODUCT_ID
        FROM PRODUCTS
        WHERE CATEGORY='Wearables'
    )
);






SELECT *
FROM CUSTOMERS;
SELECT *
FROM ORDERS;
select*
from products;

