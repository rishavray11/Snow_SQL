-- USE ROLE 
USE ROLE ACCOUNTADMIN;

-- USE WAREHOUSE 
USE WAREHOUSE COMPUTE_WH;

-- CREATING A DATABASE 
CREATE DATABASE IF NOT EXISTS JOINS_IN_SQL;

-- USE DATABASE 
USE DATABASE JOINS_IN_SQL;

-- CREATE SCHEMA FOR THE TODAYS CLASS
CREATE SCHEMA IF NOT EXISTS JOINS_SCHEMA;

-- USE SCHEMA 
USE SCHEMA JOINS_SCHEMA;

-- CREATING A TABLE NAMED CUSTOMERS
CREATE TABLE Customers (
    CustomerID INT PRIMARY KEY,
    CustomerName VARCHAR(50),
    Country VARCHAR(50)
);

-- CREATING A TABLE NAMED ORDERS
CREATE TABLE Orders (
    OrderID INT PRIMARY KEY,
    OrderDate DATE,
    CustomerID INT,
    Amount DECIMAL(10, 2),
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)
);

-- INSERTING VALUES INSIDE TABLE CUSTOMER
INSERT INTO Customers (CustomerID, CustomerName, Country)
VALUES
(1, 'John Doe', 'USA'),
(2, 'Jane Smith', 'UK'),
(3, 'David Brown', 'Canada'),
(4, 'Emily White', 'Australia'),
(5, 'Michael Green', 'USA'),
(6, 'Anna Taylor', 'USA'),
(7, 'Robert King', 'UK'),
(8, 'Laura Wilson', 'Australia'),
(9, 'James Davis', 'Canada'),
(10, 'Sophia Harris', 'USA'),
(11, 'Chris Evans', 'Australia'),
(12, 'Jessica Adams', 'Canada'),
(13, 'Lucas Black', 'USA'),
(14, 'Olivia Walker', 'UK'),
(15, 'Nathan Scott', 'USA'),
(16, 'Emma Stone', 'Australia'),
(17, 'Daniel Lewis', 'UK'),
(18, 'Sophia Clark', 'Canada'),
(19, 'Liam Johnson', 'Australia'),
(20, 'Amelia Brown', 'USA');

-- INSERTING VALUES INTO TABLE ORDERS
INSERT INTO Orders (OrderID, OrderDate, CustomerID, Amount)
VALUES
(101, '2025-01-10', 1, 250.75),
(102, '2025-01-15', 2, 320.00),
(103, '2025-01-20', 3, 450.50),
(104, '2025-02-01', 1, 120.90),
(105, '2025-02-05', 2, 310.50),
(106, '2025-02-10', NULL, 299.99),
(107, '2025-02-15', 4, 400.25),
(108, '2025-02-20', 5, 150.00),
(109, '2025-02-25', 7, 500.75),
(110, '2025-03-01', 6, 225.50),
(111, '2025-03-05', 9, 600.00),
(112, '2025-03-10', NULL, 450.00),
(113, '2025-03-12', 8, 350.00),
(114, '2025-03-15', 11, 520.75),
(115, '2025-03-18', 12, 310.50),
(116, '2025-03-20', 15, 230.99),
(117, '2025-03-22', 13, 150.20),
(118, '2025-03-25', 14, 475.65),
(119, '2025-03-26', 15, 540.90),
(120, '2025-03-28', NULL, 299.00),  -- Another order without a customer
(121, '2025-03-29', 17, 405.50),
(122, '2025-03-29', NULL, 675.00),  -- Another order without a customer
(123, '2025-03-29', 19, 850.00),
(124, '2025-03-29', 20, 399.99);


-- STARTING WITH JOINS
/*
    Basic Template - That Never Changes
    SELECT
    FROM 
    WHERE
    GROUP BY 
    HAVING 
    ORDER BY 
    LIMIT OFFSET 

    Joins - Syntax (Considering 2 tables)
    SELECT
        T1.COLUMN_NAME*, 
        T2.COLUMN_NAME*
    FROM TABLE_NUM1 / TABLE_NUM2 AS T1
    JOIN_TYPE TABLE_NUM1 / TABLE_NUM2 AS T2
    ON T1.COLUMN_NAME <CONDITION> T2.COLUMN_NAME
*/

-- INNER JOIN 
select *
from CUSTOMERS,ORDERS;
/*
    Find the list of all the customers who have placed atleast 1 order. 
*/


SELECT
    DISTINCT
    T1.CUSTOMERID AS CUSTOMER_ID_FROM_CUSTOMERS_TABLE, 
    T2.CUSTOMERID AS CUSTOMER_ID_FROM_ORDERS_TABLE, 
    T1.CUSTOMERNAME AS CUSTOMER_NAME_FROM_CUSTOMERS_TABLE
FROM CUSTOMERS AS T1
INNER JOIN ORDERS AS T2 
ON T1.CUSTOMERID = T2.CUSTOMERID
ORDER BY T1.CUSTOMERID ASC;

/*
    Find the total amount of all orders placed by each customer, and also give the customer name in the result. 
*/
SELECT 
T1.CUSTOMERNAME,
T2.AMOUNT
FROM CUSTOMERS T1
INNER JOIN ORDERS T2
ON T1.CUSTOMERID=T2.CUSTOMERID;





SELECT
    T1.CUSTOMERID AS CUSTOMER_ID_FROM_CUSTOMERS, 
    T2.ORDERID AS ORDER_ID_FROM_ORDERS,
    T1.CUSTOMERNAME AS CUSTOMERNAME,
    T2.AMOUNT AS AMOUNT_SPENT
FROM CUSTOMERS AS T1
INNER JOIN ORDERS AS T2
ON T1.CUSTOMERID = T2.CUSTOMERID;


/*
    Fild the details of orders of customers who placed their orders from USA. 
    We need to display information 
    1. customer ID 
    2. customer name
    3. customer country 
    4. order id 
    5. amount
*/
SELECT T1.CUSTOMERID,
T1.CUSTOMERNAME,
T1.COUNTRY,
T2.ORDERID,
T2.AMOUNT
FROM CUSTOMERS AS T1
INNER JOIN ORDERS AS T2
ON T1.CUSTOMERID = T2.CUSTOMERID
WHERE T1.COUNTRY ='USA';

SELECT T1.CUSTOMERID,
T1.CUSTOMERNAME,
T1.COUNTRY,
T2.ORDERID,
T2.AMOUNT
FROM CUSTOMERS AS T1
INNER JOIN ORDERS AS T2
ON T1.CUSTOMERID = T2.CUSTOMERID AND T1.COUNTRY ='USA';


 
SELECT * FROM CUSTOMERS AS T1
INNER JOIN ORDERS AS T2
ON T1.CUSTOMERID = T2.CUSTOMERID;

SELECT * FROM CUSTOMERS;
SELECT * FROM ORDERS;

-- Question 1 - Total Spending by Each Customer with More Than One Order
/*
    Get the total amount spent by each customer who has placed more than one order. 
    Show customer name, country, number of orders, and total amount spent. 
    Sort by total amount in descending order.
*/
SELECT
    SUM(AMOUNT) AS TOTAL_AMOUNT,
    CUSTOMERNAME,
    COUNTRY,
    COUNT(ORDERID) TOTAL_ORDERS,
    
FROM CUSTOMERS AS T1
INNER JOIN ORDERS AS T2
ON T1.CUSTOMERID = T2.CUSTOMERID
GROUP BY CUSTOMERNAME,COUNTRY
HAVING TOTAL_ORDERS >1
ORDER BY TOTAL_AMOUNT DESC;

/*
    Write a query to get the customer name and country where.
    Customers Whose Names Contain 'son'.
    Also the first name in customer name ends with 'ra'.
*/
SELECT CUSTOMERNAME,COUNTRY
FROM CUSTOMERS AS T1
INNER JOIN ORDERS AS T2
ON T1.CUSTOMERID = T2.CUSTOMERID
WHERE CUSTOMERNAME LIKE '%son%' 
    and
    split_part(customername, ' ',1) like '%ra';

-- Question 4 - Customers from UK and USA 
/*
    Display customer name, country, and total amount spent (only if it exceeds 500) 
    for customers from UK and USA.
*/
SELECT 
    CUSTOMERNAME,
    COUNTRY,
    SUM(AMOUNT)
FROM CUSTOMERS AS T1
INNER JOIN ORDERS AS T2
ON T1.CUSTOMERID = T2.CUSTOMERID
WHERE COUNTRY IN ('UK','USA')
GROUP BY CUSTOMERNAME,COUNTRY
HAVING  SUM(AMOUNT) >500;


SELECT CUSTOMERNAME,COUNT(ORDERID)
FROM CUSTOMERS AS T1
LEFT JOIN ORDERS AS T2
ON T1.CUSTOMERID=T2.CUSTOMERID
GROUP BY CUSTOMERNAME
HAVING COUNT(ORDERID) >1 OR COUNT(ORDERID)=0;


SELECT C.CUSTOMERID AS ID, C.CUSTOMERNAME AS CUSTOMER_NAME,
-- COUNT(C.CUSTOMERID),
-- COUNT(O.CUSTOMERID),
COUNT(O.ORDERID) FROM CUSTOMERS C LEFT JOIN ORDERS O ON O.CUSTOMERID = C.CUSTOMERID
GROUP BY C.CUSTOMERID, C.CUSTOMERNAME
HAVING NOT COUNT(O.ORDERID) =1;


/*
    Write a sql query to retrive the customer id, customer name, as well as country. 
    Classify the customers as different categorical values such as "Premium customer" if the 
    total number of orders is more than or equal to 4, "Normal Customer" if the total number of order is in range 1-3. 
    Else opportunity if the total number of order is 0
*/

SELECT T1.CUSTOMERID,T1.CUSTOMERNAME,T1.COUNTRY,COUNT(T2.ORDERID),
CASE
    WHEN  COUNT(ORDERID) >=4 THEN 'PREMIUM CUSTOMER'
    WHEN  COUNT(ORDERID) BETWEEN 1 AND 3 THEN 'NORMAL CUS'
    ELSE 'OPPORTUNITY'
END AS CUSTOMER_CATEGORY
FROM CUSTOMERS AS T1 
LEFT JOIN ORDERS AS T2
ON T1.CUSTOMERID=T2.CUSTOMERID
GROUP BY T1.CUSTOMERID,T1.CUSTOMERNAME,T1.COUNTRY;

-- QUESTION 2 
/*
    Find the total number of orders for each customer from USA, including customers who haven't placed any orders.    
    Sort the customers based on the count of their orders in ASC.
*/


SELECT COUNT(ORDERID),
CUSTOMERNAME,COUNTRY
FROM ORDERS AS T1 
RIGHT JOIN CUSTOMERS T2
ON T1.CUSTOMERID=T2.CUSTOMERID
WHERE COUNTRY='USA'
GROUP BY CUSTOMERNAME,COUNTRY
ORDER BY COUNT(ORDERID) ASC;


-- QUESTION 3
/*
    Retrieve a list of all customers and the number of their orders, but show only those who have placed 
    fewer than two orders or no orders at all.
*/
SELECT *
FROM ORDERS,CUSTOMERS;


SELECT CUSTOMERNAME,COUNT(ORDERID)
FROM ORDERS AS T1
RIGHT JOIN CUSTOMERS AS T2
ON T1.CUSTOMERID=T2.CUSTOMERID
GROUP BY CUSTOMERNAME
HAVING COUNT(ORDERID)<2
ORDER BY COUNT(ORDERID) ASC;








