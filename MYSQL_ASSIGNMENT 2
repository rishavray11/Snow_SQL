create database BIKE_DB;
USE DATABASE BIKE_DB;
-- create schemas
CREATE SCHEMA production;


CREATE SCHEMA sales;


-- create tables
CREATE TABLE production.categories (
	category_id INT AUTOINCREMENT START 1 INCREMENT 1 ORDER PRIMARY KEY,
	category_name VARCHAR (255) NOT NULL
);

CREATE TABLE production.brands (
	brand_id INT AUTOINCREMENT START 1 INCREMENT 1 ORDER PRIMARY KEY,
	brand_name VARCHAR (255) NOT NULL
);

CREATE TABLE production.products (
	product_id INT AUTOINCREMENT START 1 INCREMENT 1 ORDER PRIMARY KEY,
	product_name VARCHAR (255) NOT NULL,
	brand_id INT NOT NULL,
	category_id INT NOT NULL,
	model_year SMALLINT NOT NULL,
	list_price DECIMAL (10, 2) NOT NULL,
	FOREIGN KEY (category_id) REFERENCES production.categories (category_id) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (brand_id) REFERENCES production.brands (brand_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE sales.customers (
	customer_id INT AUTOINCREMENT START 1 INCREMENT 1 ORDER PRIMARY KEY,
	first_name VARCHAR (255) NOT NULL,
	last_name VARCHAR (255) NOT NULL,
	phone VARCHAR (25),
	email VARCHAR (255) NOT NULL,
	street VARCHAR (255),
	city VARCHAR (50),
	state VARCHAR (25),
	zip_code VARCHAR (5)
);

CREATE TABLE sales.stores (
	store_id INT AUTOINCREMENT START 1 INCREMENT 1 ORDER PRIMARY KEY,
	store_name VARCHAR (255) NOT NULL,
	phone VARCHAR (25),
	email VARCHAR (255),
	street VARCHAR (255),
	city VARCHAR (255),
	state VARCHAR (10),
	zip_code VARCHAR (5)
);

CREATE TABLE sales.staffs (
	staff_id INT AUTOINCREMENT START 1 INCREMENT 1 ORDER PRIMARY KEY,
	first_name VARCHAR (50) NOT NULL,
	last_name VARCHAR (50) NOT NULL,
	email VARCHAR (255) NOT NULL UNIQUE,
	phone VARCHAR (25),
	active tinyint NOT NULL,
	store_id INT NOT NULL,
	manager_id INT,
	FOREIGN KEY (store_id) REFERENCES sales.stores (store_id) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (manager_id) REFERENCES sales.staffs (staff_id) ON DELETE NO ACTION ON UPDATE NO ACTION
);

CREATE TABLE sales.orders (
	order_id INT AUTOINCREMENT START 1 INCREMENT 1 ORDER PRIMARY KEY,
	customer_id INT,
	order_status tinyint NOT NULL,
	-- Order status: 1 = Pending; 2 = Processing; 3 = Rejected; 4 = Completed
	order_date DATE NOT NULL,
	required_date DATE NOT NULL,
	shipped_date DATE,
	store_id INT NOT NULL,
	staff_id INT NOT NULL,
	FOREIGN KEY (customer_id) REFERENCES sales.customers (customer_id) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (store_id) REFERENCES sales.stores (store_id) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (staff_id) REFERENCES sales.staffs (staff_id) ON DELETE NO ACTION ON UPDATE NO ACTION
);

CREATE TABLE sales.order_items (
	order_id INT,
	item_id INT,
	product_id INT NOT NULL,
	quantity INT NOT NULL,
	list_price DECIMAL (10, 2) NOT NULL,
	discount DECIMAL (4, 2) NOT NULL DEFAULT 0,
	PRIMARY KEY (order_id, item_id),
	FOREIGN KEY (order_id) REFERENCES sales.orders (order_id) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (product_id) REFERENCES production.products (product_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE production.stocks (
	store_id INT,
	product_id INT,
	quantity INT,
	PRIMARY KEY (store_id, product_id),
	FOREIGN KEY (store_id) REFERENCES sales.stores (store_id) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (product_id) REFERENCES production.products (product_id) ON DELETE CASCADE ON UPDATE CASCADE
);

INSERT INTO production.brands(brand_id,brand_name) VALUES(1,'Electra');
INSERT INTO production.brands(brand_id,brand_name) VALUES(2,'Haro');
INSERT INTO production.brands(brand_id,brand_name) VALUES(3,'Heller');
INSERT INTO production.brands(brand_id,brand_name) VALUES(4,'Pure Cycles');
INSERT INTO production.brands(brand_id,brand_name) VALUES(5,'Ritchey');
INSERT INTO production.brands(brand_id,brand_name) VALUES(6,'Strider');
INSERT INTO production.brands(brand_id,brand_name) VALUES(7,'Sun Bicycles');
INSERT INTO production.brands(brand_id,brand_name) VALUES(8,'Surly');
INSERT INTO production.brands(brand_id,brand_name) VALUES(9,'Trek');


--WHAT ARE THE TOP 5 SELLING (NO OF UNITS SOLD)BIKES MODELS IN THE DATA SET.

select p.product_name,sum(s.quantity) as sum_of_products 
from production.products as p 
inner join sales.order_items as s 
on p.product_id = s.product_id 
group by p.product_name 
order by sum_of_products desc
LIMIT 5;

--Show a trend in electric bike sales(number of units sold) from 2016 to 2018, aggregate data by month & year.
SELECT PRODUCT_NAME,SUM(QUANTITY),MONTH(SHIPPED_DATE) AS MONTH,YEAR(SHIPPED_DATE) AS YEAR
FROM PRODUCTION.PRODUCTS AS P INNER JOIN
SALES.ORDER_ITEMS AS OI ON P.PRODUCT_ID=OI.PRODUCT_ID
INNER JOIN SALES.ORDERS O ON OI.ORDER_ID=O.ORDER_ID
WHERE SHIPPED_DATE BETWEEN '2016-01-01' AND '2018-12-31'
GROUP BY PRODUCT_NAME, MONTH(SHIPPED_DATE),YEAR(SHIPPED_DATE)
ORDER BY MONTH ASC,YEAR ASC;

-- Sort the stores based on average order value

SELECT STR.STORE_NAME,ROUND(AVG(QUANTITY*LIST_PRICE),2) AS AVG_ODR
FROM SALES.STORES AS STR INNER JOIN
ORDERS AS O ON STR.STORE_ID=O.STORE_ID
INNER JOIN ORDER_ITEMS AS OI ON OI.ORDER_ID=O.ORDER_ID
GROUP BY STORE_NAME
ORDER BY AVG_ODR DESC;

--Sort the stores based on average order quantity
SELECT STR.STORE_NAME,ROUND(AVG(QUANTITY),2) AS AVG_QUN
FROM SALES.STORES AS STR INNER JOIN
ORDERS AS O ON STR.STORE_ID=O.STORE_ID
INNER JOIN ORDER_ITEMS AS OI ON OI.ORDER_ID=O.ORDER_ID
GROUP BY STORE_NAME
ORDER BY AVG_QUN DESC;

--Sort the stores based on total sales( selling price )
SELECT
    STORE_NAME,
    (QUANTITY*LIST_PRICE) AS ACT_PRC,
    ROUND((ACT_PRC*DISCOUNT),2) AS DIS_PRC,
    ROUND(SUM(ACT_PRC-DIS_PRC),2)AS SELLING_PRC
FROM SALES.STORES AS STR INNER JOIN
ORDERS AS O ON STR.STORE_ID=O.STORE_ID
INNER JOIN ORDER_ITEMS AS OI ON OI.ORDER_ID=O.ORDER_ID
GROUP BY  STORE_NAME,ACT_PRC,DIS_PRC
ORDER BY SELLING_PRC DESC;

--Which store sold the most children bikes
SELECT STORE_NAME,SUM(QUANTITY) AS UNIT_SOLD
FROM SALES.STORES AS S INNER JOIN 
SALES.ORDERS AS O ON S.STORE_ID=O.STORE_ID INNER JOIN
ORDER_ITEMS AS OI ON OI.ORDER_ID=O.ORDER_ID INNER JOIN
PRODUCTION.PRODUCTS AS P ON OI.PRODUCT_ID=P.PRODUCT_ID INNER JOIN
PRODUCTION.CATEGORIES AS C ON P.CATEGORY_ID=C.CATEGORY_ID
WHERE CATEGORY_NAME='Children Bicycles'
GROUP BY STORE_NAME
ORDER BY UNIT_SOLD DESC
LIMIT 1;


--Customers from  which state bought the most bikes?
SELECT STATE,SUM(QUANTITY)AS TOTAL_QTY
FROM CUSTOMERS AS CUS INNER JOIN
ORDERS AS O ON CUS.CUSTOMER_ID=O.CUSTOMER_ID INNER JOIN
ORDER_ITEMS AS OI ON O.ORDER_ID=OI.ORDER_ID INNER JOIN
PRODUCTION.PRODUCTS AS PRO ON PRO.PRODUCT_ID=OI.PRODUCT_ID INNER JOIN 
PRODUCTION.CATEGORIES AS CAT ON CAT.CATEGORY_ID=PRO.CATEGORY_ID
WHERE CATEGORY_NAME LIKE '%Bikes'
GROUP BY STATE
ORDER BY TOTAL_QTY DESC;

-- Which is the most stocked bike in stores?
SELECT STORE_NAME,SUM(S.QUANTITY) AS TOTAL_QTY
FROM STORES AS ST INNER JOIN 
PRODUCTION.STOCKS AS S ON ST.STORE_ID=S.STORE_ID INNER JOIN 
PRODUCTION.PRODUCTS PRD ON S.PRODUCT_ID=PRD.PRODUCT_ID INNER JOIN
PRODUCTION.CATEGORIES AS CAT ON PRD.CATEGORY_ID=CAT.CATEGORY_ID
WHERE CATEGORY_NAME LIKE '%Bikes'
GROUP BY STORE_NAME
ORDER BY TOTAL_QTY DESC;

--Which bike model was sold at the highest discount( use average discount over all sales )
SELECT CATEGORY_NAME,ROUND(AVG(DISCOUNT),2) AS DIS
FROM PRODUCTION.CATEGORIES AS CAT INNER JOIN
PRODUCTION.PRODUCTS AS PRO ON CAT.CATEGORY_ID=PRO.CATEGORY_ID INNER JOIN
ORDER_ITEMS AS OI ON OI.PRODUCT_ID=PRO.PRODUCT_ID
GROUP BY CATEGORY_NAME
ORDER BY DIS DESC;

--Does Santacruz sell more mountain bikes than Baldwin?
SELECT STORE_NAME, SUM(QUANTITY) AS TOATL_QTY
FROM STORES AS STO INNER JOIN 
ORDERS AS ORD ON STO.STORE_ID=ORD.STORE_ID INNER JOIN
ORDER_ITEMS AS OI ON ORD.ORDER_ID=OI.ORDER_ID INNER JOIN 
PRODUCTION.PRODUCTS AS PRO ON OI.PRODUCT_ID=PRO.PRODUCT_ID INNER JOIN
PRODUCTION.CATEGORIES AS CAT ON CAT.CATEGORY_ID=PRO.CATEGORY_ID
WHERE CATEGORY_NAME='Mountain Bikes' AND STORE_NAME IN ('Santa Cruz Bikes','Baldwin Bikes')
GROUP BY STORE_NAME;

--What was the sale value of the single larges order
SELECT O.ORDER_ID,SUM((OI.LIST_PRICE-OI.LIST_PRICE*DISCOUNT)*QUANTITY) AS SALE_VALUE
FROM ORDER_ITEMS AS OI INNER JOIN
ORDERS AS O ON OI.ORDER_ID=O.ORDER_ID INNER JOIN
PRODUCTION.PRODUCTS AS PRO ON OI.PRODUCT_ID=PRO.PRODUCT_ID
GROUP BY O.ORDER_ID
ORDER BY SALE_VALUE DESC
LIMIT 1;

--What was the cheapest bike model sold in 2017
SELECT PRODUCT_NAME,SUM(OI.LIST_PRICE) as price
FROM PRODUCTION.BRANDS AS B INNER JOIN 
PRODUCTION.PRODUCTS AS PRO ON B.BRAND_ID=PRO.BRAND_ID INNER JOIN 
ORDER_ITEMS AS OI ON PRO.PRODUCT_ID=OI.PRODUCT_ID INNER JOIN 
ORDERS AS ORD ON OI.ORDER_ID=ORD.ORDER_ID
WHERE SHIPPED_DATE BETWEEN '2017-01-01' AND '2017-12-31'
GROUP BY PRODUCT_NAME
ORDER by price ASC
LIMIT 1;

SELECT BRAND_NAME,SUM(OI.LIST_PRICE) as price
FROM PRODUCTION.BRANDS AS B INNER JOIN 
PRODUCTION.PRODUCTS AS PRO ON B.BRAND_ID=PRO.BRAND_ID INNER JOIN 
ORDER_ITEMS AS OI ON PRO.PRODUCT_ID=OI.PRODUCT_ID INNER JOIN 
ORDERS AS ORD ON OI.ORDER_ID=ORD.ORDER_ID
WHERE SHIPPED_DATE BETWEEN '2017-01-01' AND '2017-12-31'
GROUP BY BRAND_NAME
ORDER by price ASC
LIMIT 1;

--Total number of bikes that have been sold
SELECT SUM(QUANTITY) AS BIKES_SOLD
FROM ORDER_ITEMS AS OI INNER JOIN 
PRODUCTION.PRODUCTS AS PRO ON OI.PRODUCT_ID=PRO.PRODUCT_ID
INNER JOIN PRODUCTION.CATEGORIES AS CAT ON PRO.CATEGORY_ID=CAT.CATEGORY_ID
WHERE CATEGORY_NAME LIKE '%Bikes';

--Total sales per year(price)
SELECT YEAR(SHIPPED_DATE), ROUND(SUM((OI.LIST_PRICE-OI.LIST_PRICE*DISCOUNT)*QUANTITY),2) AS TOTAL_SALE
FROM ORDER_ITEMS AS OI INNER JOIN
ORDERS AS O ON OI.ORDER_ID=O.ORDER_ID
GROUP BY YEAR(SHIPPED_DATE)
ORDER BY YEAR(SHIPPED_DATE) ASC;

--Total sales per store( price)
SELECT STORE_NAME,ROUND(SUM((OI.LIST_PRICE-OI.LIST_PRICE*DISCOUNT)*QUANTITY),2) AS TOTAL_SALE
FROM STORES AS ST INNER JOIN
ORDERS AS ORD ON ST.STORE_ID=ORD.STORE_ID
INNER JOIN ORDER_ITEMS AS OI ON ORD.ORDER_ID=OI.ORDER_ID
GROUP BY STORE_NAME
ORDER BY TOTAL_SALE DESC;

--List the sales (total amount ) driven by each staff member in descending order
SELECT CONCAT(FIRST_NAME,' ',LAST_NAME) AS STAFF_NAME, ROUND(SUM((OI.LIST_PRICE-OI.LIST_PRICE*DISCOUNT)*QUANTITY),2) AS TOTAL_AMT
FROM STAFFS AS STA INNER JOIN
ORDERS AS ORD ON STA.STAFF_ID=ORD.STAFF_ID
INNER JOIN ORDER_ITEMS AS OI ON ORD.ORDER_ID=OI.ORDER_ID
GROUP BY STAFF_NAME
ORDER BY TOTAL_AMT DESC;

--What's the average order fulfillment time ( Shippeddate -order date)
SELECT ROUND(AVG(DATEDIFF(DAY,ORDER_DATE,SHIPPED_DATE)),2) AS fulfillment_time
FROM ORDERS
ORDER BY fulfillment_time ASC;

--Which store has the shortest average fulfillment time per order
SELECT STORE_NAME,ROUND(AVG(DATEDIFF(DAY,ORDER_DATE,SHIPPED_DATE)),2) AS TIME_PER_ORDER
FROM STORES AS STO INNER JOIN
ORDERS AS O ON STO.STORE_ID=O.STORE_ID
GROUP BY STORE_NAME
ORDER BY TIME_PER_ORDER ASC
LIMIT 1;

--WHAT ARE THE LEAST 2 SELLING BRANDS (NO OF UNITS SOLD)BIKES MODELS IN THE DATA SET
SELECT BRAND_NAME,SUM(QUANTITY) AS UNIT_SOLD
FROM PRODUCTION.BRANDS AS B 
INNER JOIN PRODUCTION.PRODUCTS AS PRO ON B.BRAND_ID=PRO.BRAND_ID 
INNER JOIN PRODUCTION.CATEGORIES AS CAT ON CAT.CATEGORY_ID=PRO.CATEGORY_ID
INNER JOIN ORDER_ITEMS AS OI ON OI.PRODUCT_ID=PRO.PRODUCT_ID
INNER JOIN ORDERS AS O ON O.ORDER_ID=OI.ORDER_ID
WHERE CATEGORY_NAME LIKE '%Bikes'
GROUP BY BRAND_NAME
ORDER BY UNIT_SOLD ASC
LIMIT 2;

-- what are the 3 montsh with most bike sales
SELECT SUM(QUANTITY) AS QTY, MONTH(SHIPPED_DATE) AS MONTH
FROM ORDER_ITEMS AS OI
INNER JOIN ORDERS AS ORD ON OI.ORDER_ID=ORD.ORDER_ID
INNER JOIN PRODUCTION.PRODUCTS AS PRO ON PRO.PRODUCT_ID=OI.PRODUCT_ID
INNER JOIN PRODUCTION.CATEGORIES AS CAT ON CAT.CATEGORY_ID=PRO.CATEGORY_ID
WHERE CATEGORY_NAME LIKE '%Bikes'
GROUP BY MONTH(SHIPPED_DATE)
ORDER BY QTY DESC
LIMIT 3;


SELECT *
FROM PRODUCTION.BRANDS;
SELECT *
FROM PRODUCTION.CATEGORIES;
SELECT *
FROM PRODUCTION.PRODUCTS;
SELECT *
FROM PRODUCTION.STOCKS;

SELECT *
FROM CUSTOMERS;
SELECT *
FROM ORDERS;
SELECT *
FROM ORDER_ITEMS;
SELECT *
FROM STAFFS;
SELECT *
FROM STORES;

