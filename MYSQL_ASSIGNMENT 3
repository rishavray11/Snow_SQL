CREATE DATABASE WORKER_ASSIGNMENT;
USE DATABASE WORKER_ASSIGNMENT;

CREATE TABLE Worker (
WORKER_ID INT NOT NULL PRIMARY KEY AUTOINCREMENT START 1 INCREMENT 1 ORDER ,
FIRST_NAME CHAR(25),
LAST_NAME CHAR(25),
SALARY INT,
JOINING_DATE DATETIME,
DEPARTMENT CHAR(25)
);

INSERT INTO Worker
(WORKER_ID, FIRST_NAME, LAST_NAME, SALARY, JOINING_DATE, DEPARTMENT) VALUES
(001, 'Monika', 'Arora', 100000, '2014-02-20 09:00:00', 'HR'),
(002, 'Niharika', 'Verma', 80000, '2014-06-11 09:00:00', 'Admin'),
(003, 'Vishal', 'Singhal', 300000, '2014-02-20 09:00:00', 'HR'),
(004, 'Amitabh', 'Singh', 500000, '2014-02-20 09:00:00', 'Admin'),
(005, 'Vivek', 'Bhati', 500000, '2014-06-11 09:00:00', 'Admin'),
(006, 'Vipul', 'Diwan', 200000, '2014-06-11 09:00:00', 'Account'),
(007, 'Satish', 'Kumar', 75000, '2014-01-20 09:00:00', 'Account'),
(008, 'Geetika', 'Chauhan', 90000, '2014-04-11 09:00:00', 'Admin');



CREATE TABLE Bonus (
WORKER_REF_ID INT,
BONUS_AMOUNT INT,
BONUS_DATE DATETIME,
FOREIGN KEY (WORKER_REF_ID)
REFERENCES Worker(WORKER_ID)
 ON DELETE CASCADE
);

INSERT INTO Bonus 
(WORKER_REF_ID, BONUS_AMOUNT, BONUS_DATE) VALUES
(001, 5000, '2016-02-20'),
(002, 3000, '2016-06-11'),
(003, 4000, '2016-02-20'),
(001, 4500, '2016-02-20'),
(002, 3500, '2016-06-11');




CREATE TABLE Title (
WORKER_REF_ID INT,
WORKER_TITLE CHAR(25),
AFFECTED_FROM DATETIME,
FOREIGN KEY (WORKER_REF_ID)
REFERENCES Worker(WORKER_ID)
 ON DELETE CASCADE
);


INSERT INTO Title 
(WORKER_REF_ID, WORKER_TITLE, AFFECTED_FROM) VALUES
(001, 'Manager', '2016-02-20 00:00:00'),
(002, 'Executive', '2016-06-11 00:00:00'),
(008, 'Executive', '2016-06-11 00:00:00'),
(005, 'Manager', '2016-06-11 00:00:00'),
(004, 'Asst. Manager', '2016-06-11 00:00:00'),
(007, 'Executive', '2016-06-11 00:00:00'),
(006, 'Lead', '2016-06-11 00:00:00'),
(003, 'Lead', '2016-06-11 00:00:00');

-- Provide department wise employee count under each title
SELECT DEPARTMENT,
COUNT(WORKER_ID) OVER(PARTITION BY DEPARTMENT )
FROM WORKER AS W
    INNER JOIN
    TITLE AS T ON
    W.WORKER_ID=T.WORKER_REF_ID;

SELECT DEPARTMENT,
COUNT(CASE WHEN WORKER_TITLE='Manager' THEN 1 END) OVER(PARTITION BY DEPARTMENT) AS MANAGER,
COUNT(CASE WHEN WORKER_TITLE='Executive' THEN 1 END) OVER(PARTITION BY DEPARTMENT) AS EXECUTIVE,
COUNT(CASE WHEN WORKER_TITLE='Asst.Manager' THEN 1 END) OVER(PARTITION BY DEPARTMENT) AS ASST_MGR,
COUNT(CASE WHEN WORKER_TITLE='Lead' THEN 1 END) OVER(PARTITION BY DEPARTMENT) AS LEAD
FROM WORKER AS W
    INNER JOIN
    TITLE AS T ON
    W.WORKER_ID=T.WORKER_REF_ID;

--List all the workers (worker_id, first_name, last_name, worker_title, salary, department) with salary higher than department's Average salary

SELECT* FROM (SELECT WORKER_ID,FIRST_NAME,LAST_NAME,WORKER_TITLE,SALARY,W.DEPARTMENT,
AVG(SALARY) OVER (PARTITION BY DEPARTMENT) AS AVG_DEPT_SAL
FROM WORKER AS W INNER JOIN
     TITLE AS T ON W.WORKER_ID=T.WORKER_REF_ID)
WHERE SALARY >AVG_DEPT_SAL;

-- Identify Managers with Earnings Less Than Department Average Earnings (Salary+Bonus) 

SELECT * FROM(
SELECT CONCAT(FIRST_NAME,' ',LAST_NAME) AS MGR_NAME,SALARY,WORKER_TITLE,
ROUND(AVG(SALARY+BONUS_AMOUNT) OVER(PARTITION BY DEPARTMENT),2) AS DEP_AVG_SAL
FROM WORKER AS W 
INNER JOIN TITLE AS T ON W.WORKER_ID=T.WORKER_REF_ID
INNER JOIN BONUS AS B ON W.WORKER_ID= B.WORKER_REF_ID
WHERE WORKER_TITLE='Manager' ) AS SUB
WHERE SALARY <DEP_AVG_SAL;

--Find out which worker got the highest bonus. Display their work title as well.
SELECT * FROM (SELECT  DISTINCT CONCAT(FIRST_NAME,' ',LAST_NAME),WORKER_TITLE,DEPARTMENT,
RANK() OVER(PARTITION BY DEPARTMENT ORDER BY BONUS_AMOUNT DESC) AS RNK
FROM WORKER AS W 
INNER JOIN BONUS AS B ON W.WORKER_ID=B.WORKER_REF_ID
INNER JOIN TITLE AS T1 ON W.WORKER_ID=T1.WORKER_REF_ID) AS SUB
WHERE RNK=1;

SELECT  DISTINCT CONCAT(FIRST_NAME,' ',LAST_NAME),WORKER_TITLE,DEPARTMENT,
MAX(BONUS_AMOUNT) OVER(PARTITION BY DEPARTMENT) AS RNK
FROM WORKER AS W 
INNER JOIN BONUS AS B ON W.WORKER_ID=B.WORKER_REF_ID
INNER JOIN TITLE AS T1 ON W.WORKER_ID=T1.WORKER_REF_ID
LIMIT 1;

-- Identify employees who received a promotion, and a salary increase within the same year--.


--Calculate the percentage salary increase for each promotion

SELECT 
    SALARY,
    BONUS_AMOUNT,
    (SALARY + BONUS_AMOUNT) AS TOTAL_SAL,
    (BONUS_AMOUNT * 100.0 / SALARY) AS PERCENT_INCREASE,
    AVG(BONUS_AMOUNT * 100.0 / SALARY) 
        OVER (PARTITION BY WORKER_ID) AS DEPT_AVG_PERCENT
FROM WORKER AS W
INNER JOIN BONUS AS B 
    ON W.WORKER_ID = B.WORKER_REF_ID;

--Rank employees by their total bonus amount within each department.
SELECT CONCAT(FIRST_NAME,' ',LAST_NAME) AS NAME,DEPARTMENT,
SUM(BONUS_AMOUNT) AS TOTAL_BONUS,
RANK() OVER(PARTITION BY DEPARTMENT ORDER BY TOTAL_BONUS DESC)
FROM WORKER AS W
INNER JOIN BONUS AS B 
ON W.WORKER_ID = B.WORKER_REF_ID
GROUP BY DEPARTMENT,CONCAT(FIRST_NAME,' ',LAST_NAME);

SELECT 
    CONCAT(FIRST_NAME,' ',LAST_NAME) AS NAME,
    DEPARTMENT,
    SUM(BONUS_AMOUNT) AS TOTAL_BONUS,
    RANK() OVER(
        PARTITION BY DEPARTMENT 
        ORDER BY SUM(BONUS_AMOUNT) DESC
    ) AS RNK
FROM WORKER AS W
INNER JOIN BONUS AS B 
    ON W.WORKER_ID = B.WORKER_REF_ID
GROUP BY DEPARTMENT, CONCAT(FIRST_NAME,' ',LAST_NAME);

--Identify the difference between each employeeâ€™s bonus and the highest bonus in their department
SELECT CONCAT(FIRST_NAME,' ',LAST_NAME),DEPARTMENT,BONUS_AMOUNT,
BONUS_AMOUNT-MAX(BONUS_AMOUNT) OVER (ORDER BY BONUS_AMOUNT DESC) AS DIFF_BET_BONUS,
MAX(BONUS_AMOUNT) OVER(PARTITION BY DEPARTMENT) AS HIGHEST_BONUS
FROM WORKER AS W INNER JOIN
BONUS AS B ON W.WORKER_ID=B.WORKER_REF_ID;

--Calculate the cumulative bonus for each department, ordered by bonus date
SELECT  CONCAT(FIRST_NAME,' ',LAST_NAME),DEPARTMENT,BONUS_AMOUNT,
SUM(BONUS_AMOUNT) OVER (PARTITION BY DEPARTMENT ORDER BY BONUS_DATE,FIRST_NAME)

FROM WORKER AS W INNER JOIN
BONUS AS B ON W.WORKER_ID=B.WORKER_REF_ID
ORDER BY DEPARTMENT DESC;







SELECT *
FROM WORKER,BONUS;
SELECT *
FROM BONUS;
SELECT *
FROM TITLE;

