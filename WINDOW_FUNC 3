-- ASSIGNING THE ACCOUNT TYPE 
USE ROLE ACCOUNTADMIN;

-- USING THE WAREHOUSE AVAILABLE
USE WAREHOUSE COMPUTE_WH;

-- CREATING A DATABASE NAMED AS SUBQUERIES_DATABASE
CREATE DATABASE IF NOT EXISTS WINDOW_FUNCTIONS_SESSION_3_DB;

-- USING THE DATABASE CREATED
USE DATABASE WINDOW_FUNCTIONS_SESSION_3_DB;

-- CREATING A SCHEMA NAMED AS SUBQUERIES_SCHEMA
CREATE SCHEMA IF NOT EXISTS WINDOW_FUNCTIONS_SESSION_3_SCHEMA;

-- USING THE SCHEMA CREATED 
USE SCHEMA WINDOW_FUNCTIONS_SESSION_3_SCHEMA;

-- Practice Question 
-- QUESTION 1
/*
    Tables:
        Students(student_id, student_name)
        Subjects(subject_name)
        Examinations(student_id, subject_name) (may have duplicates)
    Task: 
        Write a query to find how many times each student attended each subject's exam.
    Return:
        student_id, student_name, subject_name, attended_exams
        Sort by student_id, then subject_name.
*/
SELECT S.STUDENT_ID,E.SUBJECT_NAME,COUNT(SUBJECT_NAME)
FROM STUDENTS AS S INNER JOIN 
EXAMINATIONS AS E ON S.STUDENT_ID=E.STUDENT_ID
GROUP BY S.STUDENT_ID,E.SUBJECT_NAME;


SELECT 
    S.STUDENT_ID,
    S.STUDENT_NAME,
    SUB.SUBJECT_NAME,
    COUNT(E.SUBJECT_NAME) AS CNT
FROM STUDENTS AS S 
CROSS JOIN
    SUBJECTS AS SUB
LEFT JOIN
    EXAMINATIONS AS E ON E.STUDENT_ID=S.STUDENT_ID 
    AND
    E.SUBJECT_NAME=SUB.SUBJECT_NAME
GROUP BY S.STUDENT_ID,S.STUDENT_NAME,SUB.SUBJECT_NAME
ORDER BY S.STUDENT_NAME ASC;


SELECT *
FROM STUDENTS;
SELECT  *
FROM SUBJECTS;
SELECT *
FROM EXAMINATIONS;


-- Creating the tables for the question
CREATE OR REPLACE TABLE Students (
    student_id INT PRIMARY KEY,
    student_name VARCHAR(50)
);

CREATE OR REPLACE TABLE Subjects (
    subject_name VARCHAR(50) PRIMARY KEY
);

CREATE OR REPLACE TABLE Examinations (
    student_id INT,
    subject_name VARCHAR(50),
    FOREIGN KEY (student_id) REFERENCES Students(student_id),
    FOREIGN KEY (subject_name) REFERENCES Subjects(subject_name)
);


-- Inserting Data into the tables 
INSERT INTO Students (student_id, student_name) VALUES
(1, 'Alice'),
(2, 'Bob'),
(13, 'John'),
(6, 'Alex');

INSERT INTO Subjects (subject_name) VALUES
('Math'),
('Physics'),
('Programming');

INSERT INTO Examinations (student_id, subject_name) VALUES
(1, 'Math'),
(1, 'Physics'),
(1, 'Programming'),
(2, 'Programming'),
(1, 'Physics'),
(1, 'Math'),
(13, 'Math'),
(13, 'Programming'),
(13, 'Physics'),
(2, 'Math'),
(1, 'Math');




-- Window functions 
-- Creating a table named Sales_order
CREATE OR REPLACE TABLE sales_orders (
    order_id INT,
    customer_name STRING,
    order_date DATE,
    sales_amount DECIMAL(10,2),
    region STRING
);

-- Inserting records into the table Sales_Order 
INSERT INTO sales_orders (order_id, customer_name, order_date, sales_amount, region) VALUES
(101, 'Amit', '2025-01-05', 5000.00, 'North'),
(102, 'Amit', '2025-01-15', 3000.00, 'North'),
(103, 'Amit', '2025-02-01', 4500.00, 'North'),
(104, 'Bhavna', '2025-01-10', 7000.00, 'South'),
(105, 'Bhavna', '2025-02-05', 2000.00, 'South'),
(106, 'Bhavna', '2025-02-20', 8000.00, 'South'),
(107, 'Chetan', '2025-01-07', 6500.00, 'West'),
(108, 'Chetan', '2025-01-25', 4000.00, 'West'),
(109, 'Chetan', '2025-03-01', 7500.00, 'West'),
(110, 'Deepa', '2025-01-12', 6000.00, 'East'),
(111, 'Deepa', '2025-03-15', 9000.00, 'East'),
(112, 'Amit', '2025-03-01', 5500.00, 'North'),
(113, 'Amit', '2025-03-20', 6200.00, 'North'),
(114, 'Bhavna', '2025-03-05', 4000.00, 'South'),
(115, 'Bhavna', '2025-03-18', 9000.00, 'South'),
(116, 'Chetan', '2025-03-15', 5000.00, 'West'),
(117, 'Chetan', '2025-04-02', 6500.00, 'West'),
(118, 'Deepa', '2025-04-01', 7500.00, 'East'),
(119, 'Deepa', '2025-04-20', 8200.00, 'East');




-- OPEN MYSQL WORKBENCH TO SEE THE DIFFERENCE
/*
                CREATE DATABASE IF NOT EXISTS window_functions_session_3;
                
                USE window_functions_session_3;
                
                CREATE TABLE IF NOT EXISTS sales_orders (
                    order_id INT,
                    customer_name VARCHAR(100),
                    order_date DATE,
                    sales_amount DECIMAL(10,2),
                    region VARCHAR(100)
                );
                
                -- Inserting records into the table Sales_Order 
                INSERT INTO sales_orders (order_id, customer_name, order_date, sales_amount, region) VALUES
                (101, 'Amit', '2025-01-05', 5000.00, 'North'),
                (102, 'Amit', '2025-01-15', 3000.00, 'North'),
                (103, 'Amit', '2025-02-01', 4500.00, 'North'),
                (104, 'Bhavna', '2025-01-10', 7000.00, 'South'),
                (105, 'Bhavna', '2025-02-05', 2000.00, 'South'),
                (106, 'Bhavna', '2025-02-20', 8000.00, 'South'),
                (107, 'Chetan', '2025-01-07', 6500.00, 'West'),
                (108, 'Chetan', '2025-01-25', 4000.00, 'West'),
                (109, 'Chetan', '2025-03-01', 7500.00, 'West'),
                (110, 'Deepa', '2025-01-12', 6000.00, 'East'),
                (111, 'Deepa', '2025-03-15', 9000.00, 'East'),
                (112, 'Amit', '2025-03-01', 5500.00, 'North'),
                (113, 'Amit', '2025-03-20', 6200.00, 'North'),
                (114, 'Bhavna', '2025-03-05', 4000.00, 'South'),
                (115, 'Bhavna', '2025-03-18', 9000.00, 'South'),
                (116, 'Chetan', '2025-03-15', 5000.00, 'West'),
                (117, 'Chetan', '2025-04-02', 6500.00, 'West'),
                (118, 'Deepa', '2025-04-01', 7500.00, 'East'),
                (119, 'Deepa', '2025-04-20', 8200.00, 'East');
*/





-- PRACTICE QUESTIONS
-- CREATING TABLE
CREATE OR REPLACE TABLE employees (
    id INT PRIMARY KEY,
    name VARCHAR(50),
    department VARCHAR(50),
    age INT,
    salary DECIMAL(10, 2)
);


-- INSERTING VALUES 
INSERT INTO employees (id, name, department, age, salary) VALUES
(1, 'John Doe', 'HR', 30, 50000.00),
(2, 'Jane Smith', 'IT', 25, 70000.00),
(3, 'Michael Brown', 'Finance', 40, 85000.00),
(4, 'Emily Davis', 'IT', 35, 75000.00),
(5, 'Chris Johnson', 'HR', 28, 55000.00),
(6, 'Anna Wilson', 'Finance', 50, 90000.00),
(7, 'David Lee', 'IT', 45, 80000.00),
(8, 'Sophia King', 'HR', 26, 53000.00),
(9, 'James White', 'Finance', 38, 88000.00),
(10, 'Olivia Green', 'IT', 32, 72000.00),
(11, 'Robert Hall', 'Finance', 29, 76000.00),
(12, 'Linda Young', 'HR', 41, 60000.00),
(13, 'William Scott', 'IT', 27, 69000.00),
(14, 'Patricia Adams', 'Finance', 33, 82000.00),
(15, 'Charles Baker', 'HR', 48, 64000.00),
(16, 'Barbara Turner', 'IT', 36, 77000.00),
(17, 'Daniel Harris', 'Finance', 42, 88000.00),
(18, 'Nancy Martin', 'IT', 31, 71000.00),
(19, 'Thomas Thompson', 'HR', 37, 59000.00),
(20, 'Karen Rodriguez', 'Finance', 46, 93000.00);


-- WAQTD ORDER DATE,CUSTOMER NAME AND NEXT ORDER DATE
SELECT ORDER_ID,CUSTOMER_NAME,ORDER_DATE,
LEAD(ORDER_DATE) OVER(PARTITION BY CUSTOMER_NAME ORDER BY ORDER_DATE ASC) AS NXT_DATE
FROM sales_orders
ORDER BY CUSTOMER_NAME ASC;

--WAQTD THE CUSTOMER NAME, DURATION OF THE REPEAT ORDER FROM EACH CUSTOMER BASED ON CUSTOMER ID
SELECT CUSTOMER_NAME,
    ORDER_DATE AS CURRENT_DATE,
    LEAD(ORDER_DATE) OVER (PARTITION BY CUSTOMER_NAME ORDER BY ORDER_DATE ASC) AS NXT_DATE,
    DATEDIFF(DAY,ORDER_DATE, LEAD(ORDER_DATE) OVER (PARTITION BY CUSTOMER_NAME ORDER BY ORDER_DATE ASC)) AS DATE_DIFF
FROM SALES_ORDERS
ORDER BY CUSTOMER_NAME ASC;

--LIST OF ALL ORDERS AND AMOUNT FOR EACH CUSTOMER ALONG WITH THEIR NEXT SALES AMOUNT BASE ON ORDER DATE IF NO NEXT AMOUNT IS PRESENT THEN RETURN 0 AS THE VALUE
SELECT ORDER_ID,CUSTOMER_NAME,ORDER_DATE, 
LEAD(ORDER_DATE,3) OVER (PARTITION BY CUSTOMER_NAME ORDER BY ORDER_DATE ASC) AS NEXT_ORD_DATE,
SALES_AMOUNT,
LEAD(SALES_AMOUNT,1,0) OVER(PARTITION BY CUSTOMER_NAME ORDER BY ORDER_DATE ASC) AS NEXT_AMT

FROM SALES_ORDERS;
-- LEAD(SALES_AMOUNT,3,0) MEANS IT WILL RETURN OFFSET OF 3(SKIP 3 VALUE) AND 3 NULL VALUE, 0 MEANS DEFULT VALUE IF WE WANT TO IN PLACE OFF NULL OR ANYOTHER



-- WAQTD ORDER DATE,CUSTOMER NAME AND PREVIOUS ORDER DATE
SELECT ORDER_ID,CUSTOMER_NAME,ORDER_DATE,
LAG(ORDER_DATE) OVER (PARTITION BY CUSTOMER_NAME ORDER BY ORDER_DATE ASC) AS PRV_DATE
FROM SALES_ORDERS
ORDER BY CUSTOMER_NAME ASC;

--WAQTD THIRD CONSUCATIVE PREVIOUS ORDER OF EACH AND EVERY CUSTOMER ALONG WITH THERE SALES AMOUNT
SELECT ORDER_ID,CUSTOMER_NAME,SALES_AMOUNT, ORDER_DATE,
LAG(ORDER_DATE,3) OVER (PARTITION BY CUSTOMER_NAME ORDER BY ORDER_DATE ASC) AS PREV_ORDER,
LAG(SALES_AMOUNT,3) OVER (PARTITION BY CUSTOMER_NAME ORDER BY ORDER_DATE ASC) AS AMT
FROM SALES_ORDERS
ORDER BY CUSTOMER_NAME ASC;

--FIRST VALUE
--WASTD THE FIRST ORDER DATE OF EACH CUSTOMER ALONG WITH THEIR ORDER ID
SELECT ORDER_ID,CUSTOMER_NAME,ORDER_DATE,
FIRST_VALUE(ORDER_DATE) OVER(PARTITION BY CUSTOMER_NAME ORDER BY ORDER_DATE ASC) AS FIRST_ORD_DATE
FROM SALES_ORDERS
ORDER BY CUSTOMER_NAME ASC;


-- FIRST SALES AMT BASED ON THE ORDER DATE 
SELECT ORDER_ID,CUSTOMER_NAME,ORDER_DATE,SALES_AMOUNT,
FIRST_VALUE(SALES_AMOUNT) OVER (PARTITION BY CUSTOMER_NAME ORDER BY ORDER_DATE ASC) AS FIRST_AMT
FROM SALES_ORDERS
ORDER BY CUSTOMER_NAME ASC;

-- LAST SALES AMT BASED ON THE ORDER DATE 
SELECT ORDER_ID,CUSTOMER_NAME,SALES_AMOUNT,ORDER_DATE,
LAST_VALUE(SALES_AMOUNT) OVER (PARTITION BY CUSTOMER_NAME ORDER BY ORDER_DATE ASC) AS LAST_AMT
FROM SALES_ORDERS
ORDER BY CUSTOMER_NAME ASC;


-- LEAD() FUNCTION
SELECT *
FROM EMPLOYEES;
-- Q1 – Simple LEAD() Example
/*
    Find each employee’s salary along with the next employee’s salary based on salary order (whole company, no department grouping).
*/
SELECT ID, NAME, DEPARTMENT,
LEAD(NAME) OVER (ORDER BY SALARY ASC) AS NEXT_EMP,
SALARY,
LEAD(SALARY) OVER (ORDER BY SALARY ASC) AS NEXT_SAL
FROM EMPLOYEES;


-- Q2 – LEAD() with PARTITION BY
/*
    Find each employee’s salary and the salary of the next employee in the same department based on salary order.
*/
SELECT ID, NAME, DEPARTMENT,
LEAD(NAME) OVER (PARTITION BY DEPARTMENT ORDER BY SALARY ASC) AS NET_EMP,
SALARY,
LEAD(SALARY) OVER (PARTITION BY DEPARTMENT ORDER BY SALARY ASC) AS NEXT_SAL
FROM EMPLOYEES;



-- LAG()
-- Q1 – Simple LAG() Example
/*
    Find each employee’s salary along with the previous employee’s salary based on salary order (whole company, no department grouping).
*/
SELECT ID,NAME,
    LAG(NAME) OVER(ORDER BY SALARY ASC) AS PREVIOUS_EMP,
    DEPARTMENT,SALARY,
    LAG(SALARY) OVER(ORDER BY SALARY ASC) AS PREVIOUS_SAL
FROM EMPLOYEES;


-- Q2 – LAG() with PARTITION BY 
/*
    Find each employee’s salary and the salary of the previous employee in the same department based on salary order.
*/
SELECT ID,NAME,
    LAG(NAME) OVER (PARTITION BY DEPARTMENT ORDER BY SALARY ASC) AS PREV_EMP,
    DEPARTMENT,SALARY,
    LAG(SALARY) OVER (PARTITION BY DEPARTMENT ORDER BY SALARY ASC) AS PREV_SAL
FROM EMPLOYEES;

--waqtd customer name,order date, sales amt,last sales amt value for 1 preciding and unbounded following records
SELECT CUSTOMER_NAME,ORDER_DATE,SALES_AMOUNT,
LAST_VALUE(SALES_AMOUNT) OVER (PARTITION BY CUSTOMER_NAME ORDER BY ORDER_DATE ASC 
ROWS BETWEEN 1 PRECEDING AND UNBOUNDED FOLLOWING)
FROM SALES_ORDERS
ORDER BY CUSTOMER_NAME ASC ,ORDER_DATE ASC;


