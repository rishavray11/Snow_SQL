-- ASSIGNING THE ACCOUNT TYPE 
USE ROLE ACCOUNTADMIN;

-- USING THE WAREHOUSE AVAILABLE
USE WAREHOUSE COMPUTE_WH;

-- CREATING A DATABASE NAMED AS SUBQUERIES_DATABASE
CREATE DATABASE IF NOT EXISTS Recursive_Database;

-- USING THE DATABASE CREATED
USE DATABASE Recursive_Database;

-- CREATING A SCHEMA NAMED AS SUBQUERIES_SCHEMA
CREATE SCHEMA IF NOT EXISTS Recursive_SCHEMA;

-- USING THE SCHEMA CREATED 
USE SCHEMA Recursive_SCHEMA;

-- Practice Problems 
-- Department Table
CREATE OR REPLACE TABLE DEPARTMENTS (
    DEPT_ID INT,
    DEPT_NAME STRING
);

INSERT INTO DEPARTMENTS (DEPT_ID, DEPT_NAME) VALUES
(1, 'HR'),
(2, 'Finance'),
(3, 'IT'),
(4, 'Marketing'),
(5, 'Operations');

-- Employee Table
CREATE OR REPLACE TABLE EMPLOYEES (
    EMP_ID INT,
    EMP_NAME STRING,
    MANAGER_ID INT,
    DEPT_ID INT,
    SALARY INT
);

INSERT INTO EMPLOYEES (EMP_ID, EMP_NAME, MANAGER_ID, DEPT_ID, SALARY) VALUES
(101, 'Alice',   NULL, 2, 90000),   -- Finance Head
(102, 'Bob',     101,  2, 60000),
(103, 'Charlie', 101,  2, 55000),
(104, 'David',   NULL, 3, 120000),  -- IT Head
(105, 'Eve',     104,  3, 80000),
(106, 'Frank',   104,  3, 75000),
(107, 'Grace',   NULL, 1, 70000),   -- HR Head
(108, 'Heidi',   107,  1, 50000),
(109, 'Ivan',    NULL, 4, 95000),   -- Marketing Head
(110, 'Judy',    109,  4, 60000),
(111, 'Ken',     104,  3, 85000),
(112, 'Laura',   109,  4, 72000),
(113, 'Mallory', 107,  1, 48000),
(114, 'Niaj',    101,  2, 58000),
(115, 'Oscar',   104,  3, 93000),
(116, 'Peggy',   109,  4, 66000),
(117, 'Quinn',   NULL, 5, 110000),  -- Ops Head
(118, 'Ruth',    117,  5, 75000),
(119, 'Sybil',   117,  5, 72000),
(120, 'Trent',   117,  5, 70000),
(121, 'Uma',     117,  5, 69000),
(122, 'Victor',  104,  3, 77000),
(123, 'Wendy',   107,  1, 52000);

SELECT * FROM DEPARTMENTS;
SELECT * FROM EMPLOYEES;
-- Problem 1 
/*
Problem 1 (Challenging): Second Highest Salary by Department â€“ Without Using MAX() Twice

Question:
Find the second highest salary in each department. But you cannot simply use MAX() twice.
Students should use CTEs with window functions (DENSE_RANK() or ROW_NUMBER()) to solve.
*/
-- Solution
WITH CTE AS(
SELECT 
    E.SALARY,
    D.DEPT_ID,
    D.DEPT_NAME,
    DENSE_RANK() OVER(PARTITION BY E.DEPT_ID ORDER BY E.SALARY DESC) AS RNK
FROM DEPARTMENTS AS D
INNER JOIN
EMPLOYEES AS E ON D.DEPT_ID=E.DEPT_ID
)
SELECT * 
FROM CTE
WHERE RNK=2;



-- Problem 2: Managers Earning Less Than Their Subordinates
/*
Question:
Find all managers who earn less salary than at least one of their direct reports.
Display:
    Manager Name
    Manager Salary
    Subordinate Name
    Subordinate Salary
*/
-- Solution
WITH CTE AS(
SELECT
    E1.EMP_NAME AS MRG,
    E1.SALARY AS MGR_SAL,
    E.EMP_NAME AS EMP_NAME,
    E.SALARY AS EMP_SAL
    
FROM EMPLOYEES AS E
JOIN EMPLOYEES AS E1
ON E.MANAGER_ID=E1.EMP_ID
--WHERE  E1.SALARY >E.SALARY
)
SELECT *
FROM CTE 
WHERE MGR_SAL< EMP_SAL;

-- Union and Union all 
-- Contractors Table
CREATE OR REPLACE TABLE CONTRACTORS (
    CONTRACTOR_ID INT,
    CONTRACTOR_NAME STRING,
    DEPT_ID INT,
    SALARY INT
);

INSERT INTO CONTRACTORS (CONTRACTOR_ID, CONTRACTOR_NAME, DEPT_ID, SALARY) VALUES
(201, 'Alex', 3, 40000),
(202, 'Brian', 2, 45000),
(203, 'Cathy', 5, 42000),
(204, 'Derek', 4, 46000),
(205, 'Eva',   3, 40000); -- Duplicate salary with Alex to test UNION vs UNION ALL

--Employees with Salary < 50K OR Contractors with Salary < 50K
SELECT EMP_NAME,SALARY
FROM EMPLOYEES
WHERE SALARY<50000
UNION ALL
SELECT CONTRACTOR_NAME,SALARY
FROM CONTRACTORS
WHERE SALARY<50000;

