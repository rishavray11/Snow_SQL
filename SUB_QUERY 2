-- Using the role Account Admin
USE ROLE ACCOUNTADMIN;

-- Using the cluster Compute_WH
USE WAREHOUSE COMPUTE_WH;

-- Creating Database named as CommonTableExpressionDatabase 
CREATE DATABASE IF NOT EXISTS CommonTableExpressionDatabase;

-- Using the recently created database named CommonTableExpressionDatabase
USE DATABASE CommonTableExpressionDatabase;

-- Creating a schema named as CommonTableExpression Schema 
CREATE SCHEMA IF NOT EXISTS CommonTableExpressionSchema;

-- Using the recently created schema 
USE SCHEMA CommonTableExpressionSchema;

-- PRACTICE QUESTIONS
-- QUESTION 1 
/*
    Table - Employee
        (employee_id, department_id) is the primary key (combination of columns with unique values) for this table.
        employee_id is the id of the employee.
        department_id is the id of the department to which the employee belongs.
        primary_flag is an ENUM (category) of type ('Y', 'N'). If the flag is 'Y', 
        the department is the primary department for the employee. If the flag is 'N', the department is not the primary.
    Requirement
        Employees can belong to multiple departments. When the employee joins other departments, 
        they need to decide which department is their primary department. 
        Note that when an employee belongs to only one department, their primary column is 'N'.
        Write a solution to report all the employees with their primary department. 
        For employees who belong to one department, report their only department.
        Return the result table in any order.
*/
SELECT * FROM Employee;

SELECT EMPLOYEE_ID,DEPARTMENT_ID,PRIMARY_FLAG
FROM EMPLOYEE
WHERE PRIMARY_FLAG='Y'
OR EMPLOYEE_ID IN (
    SELECT EMPLOYEE_ID
    FROM EMPLOYEE
    GROUP BY EMPLOYEE_ID
    HAVING COUNT(EMPLOYEE_ID)=1
);


-- DATABASE 
-- Create Employee table
CREATE OR REPLACE TABLE Employee (
    employee_id INT,
    department_id INT,
    primary_flag VARCHAR(1),
    PRIMARY KEY (employee_id, department_id)
);

-- Insert sample data
INSERT INTO Employee (employee_id, department_id, primary_flag) VALUES
(1, 1, 'N'),
(2, 1, 'Y'),
(2, 2, 'N'),
(3, 3, 'N'),
(4, 2, 'N'),
(4, 3, 'Y'),
(4, 4, 'N');

-- Solution



-- QUESTION 2
/*
    Table - Logs
        In SQL, id is the primary key for this table.
        id is an autoincrement column starting from 1.
    Requirement
        Find all numbers that appear at least three times consecutively.
        Return the result table in any order.
        Return the result table in any order.
*/
SELECT * FROM LOGS;

--using lead()
SELECT *
FROM(
    SELECT ID,NUM AS CURRENT_NUM,
    CASE
    WHEN
    LEAD(NUM,1) OVER (ORDER BY ID)= NUM
    AND
    LEAD(NUM,2) OVER (ORDER BY ID) =NUM
    THEN NUM ELSE NULL
    END AS NUM
    FROM LOGS
)
WHERE NUM IS NOT NULL;

--using join
SELECT L1.NUM
FROM LOGS AS L1
JOIN LOGS AS L2 ON 
L1.ID=L2.ID-1
JOIN LOGS AS L3 ON
L1.ID=L3.ID-2
WHERE L1.NUM=L2.NUM
AND 
L1.NUM=L3.NUM;




-- DATABASE 
-- Create Logs table
CREATE OR REPLACE TABLE Logs (
    id INT,
    num INT
);

-- Insert sample data
INSERT INTO Logs (id, num) VALUES
(1, 1),
(2, 1),
(3, 1),
(4, 2),
(5, 1),
(6, 2),
(7, 2);

-- Solution 1 




-- CTE 
CREATE DATABASE IF NOT EXISTS CTE_DATABASE;

-- CREATING A SCHEMA NAMED AS SUBQUERIES_SCHEMA
CREATE SCHEMA IF NOT EXISTS CTE_SCHEMA;

-- USING THE DATABASE CREATED
USE DATABASE CTE_DATABASE;

-- USING THE SCHEMA CREATED 
USE SCHEMA CTE_SCHEMA;

-- CREATING THE TABLE CUSTOMERS
CREATE TABLE CUSTOMERS_1 (
    CUSTOMER_ID INT PRIMARY KEY,
    CUSTOMER_NAME VARCHAR(100),
    CITY VARCHAR(50),
    COUNTRY VARCHAR(50),
    JOINED_DATE DATE
);
SELECT * FROM CUSTOMERS_1;

-- CREATING THE TABLE ORDERS
CREATE TABLE ORDERS_1 (
    ORDER_ID INT PRIMARY KEY,
    CUSTOMER_ID INT,
    PRODUCT_ID INT,
    ORDER_DATE DATE,
    SHIP_DATE DATE,
    QUANTITY INT,
    FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMERS(CUSTOMER_ID)
);

-- CREATING THE TABLE PRODUCTS
CREATE TABLE PRODUCTS_1 (
    PRODUCT_ID INT PRIMARY KEY,
    PRODUCT_NAME VARCHAR(100),
    CATEGORY VARCHAR(50),
    UNIT_PRICE DECIMAL(10, 2)
);

-- INSERTING VALUES INTO THE CUSTOMERS TABLE 
INSERT INTO CUSTOMERS_1 (CUSTOMER_ID, CUSTOMER_NAME, CITY, COUNTRY, JOINED_DATE) VALUES
(1, 'John Doe', 'Toronto', 'Canada', '2022-01-15'),
(2, 'Jane Smith', 'New York', 'USA', '2021-03-22'),
(3, 'Carlos Lopez', 'Mexico City', 'Mexico', '2023-05-10'),
(4, 'Sophia Patel', 'London', 'UK', '2021-11-19'),
(5, 'Ahmed Khan', 'Mumbai', 'India', '2022-09-30'),
(6, 'Emily Johnson', 'Los Angeles', 'USA', '2022-05-05'),
(7, 'James Lee', 'Sydney', 'Australia', '2023-01-20'),
(8, 'Emma Wilson', 'Vancouver', 'Canada', '2021-08-14'),
(9, 'Mohammed Ali', 'Dubai', 'UAE', '2022-04-11'),
(10, 'Liu Wei', 'Beijing', 'China', '2021-12-28'),
(11, 'Olivia Brown', 'Melbourne', 'Australia', '2023-03-30'),
(12, 'Isabella Martinez', 'Madrid', 'Spain', '2022-07-25'),
(13, 'Liam Evans', 'Auckland', 'New Zealand', '2021-09-17'),
(14, 'Hannah Williams', 'Chicago', 'USA', '2022-02-18'),
(15, 'Arjun Gupta', 'Delhi', 'India', '2023-06-12'),
(16, 'Lucas Kim', 'Seoul', 'South Korea', '2021-10-21'),
(17, 'Eva Garcia', 'Barcelona', 'Spain', '2022-08-07'),
(18, 'David Thompson', 'Houston', 'USA', '2023-07-02'),
(19, 'Ava Adams', 'Boston', 'USA', '2021-11-30'),
(20, 'Noah Clark', 'San Francisco', 'USA', '2022-03-19'),
(21, 'Chloe Robinson', 'Paris', 'France', '2022-12-01'),
(22, 'Mia Turner', 'Rome', 'Italy', '2021-05-22'),
(23, 'Elijah Harris', 'Berlin', 'Germany', '2023-04-18'),
(24, 'Zara Ahmed', 'Cairo', 'Egypt', '2022-06-03'),
(25, 'William King', 'Dublin', 'Ireland', '2021-07-11'),
(26, 'Sophia Lee', 'Tokyo', 'Japan', '2023-08-29'),
(27, 'Benjamin Scott', 'Edinburgh', 'UK', '2021-01-08'),
(28, 'Lucas Anderson', 'Stockholm', 'Sweden', '2022-10-14'),
(29, 'Isla Perez', 'Buenos Aires', 'Argentina', '2023-02-25'),
(30, 'Ryan Baker', 'Cape Town', 'South Africa', '2021-09-05');

-- INSERTING THE VALUES INTO THE ORDERS TABLE
INSERT INTO ORDERS_1 (ORDER_ID, CUSTOMER_ID, PRODUCT_ID, ORDER_DATE, SHIP_DATE, QUANTITY)
VALUES
(1, 1, 101, '2024-01-01', '2024-01-05', 10),
(2, 2, 102, '2024-01-03', '2024-01-06', 5),
(3, 3, 103, '2024-01-05', '2024-01-10', 8),
(4, 4, 104, '2024-01-07', '2024-01-12', 3),
(5, 5, 105, '2024-01-10', '2024-01-15', 12),
(6, 6, 106, '2024-01-12', '2024-01-17', 20),
(7, 7, 107, '2024-01-14', '2024-01-18', 6),
(8, 8, 108, '2024-01-17', '2024-01-22', 15),
(9, 9, 109, '2024-01-18', '2024-01-23', 9),
(10, 10, 110, '2024-01-20', '2024-01-25', 18),
(11, 11, 111, '2024-01-23', '2024-01-28', 11),
(12, 12, 112, '2024-01-25', '2024-01-29', 7),
(13, 13, 113, '2024-01-27', '2024-02-01', 16),
(14, 14, 114, '2024-01-29', '2024-02-03', 4),
(15, 15, 115, '2024-01-31', '2024-02-05', 19),
(16, 16, 116, '2024-02-02', '2024-02-07', 6),
(17, 17, 117, '2024-02-04', '2024-02-08', 14),
(18, 18, 118, '2024-02-06', '2024-02-10', 9),
(19, 19, 119, '2024-02-08', '2024-02-13', 21),
(20, 20, 120, '2024-02-10', '2024-02-15', 17),
(21, 1, 101, '2024-02-12', '2024-02-17', 5),
(22, 2, 102, '2024-02-14', '2024-02-19', 7),
(23, 3, 103, '2024-02-15', '2024-02-21', 3),
(24, 4, 104, '2024-02-17', '2024-02-22', 11),
(25, 5, 105, '2024-02-18', '2024-02-23', 9),
(26, 6, 106, '2024-02-19', '2024-02-24', 10),
(27, 7, 107, '2024-02-20', '2024-02-25', 6),
(28, 8, 108, '2024-02-21', '2024-02-26', 15),
(29, 9, 109, '2024-02-22', '2024-02-27', 12),
(30, 10, 110, '2024-02-23', '2024-02-28', 18),
(31, 11, 111, '2024-02-24', '2024-03-01', 5),
(32, 12, 112, '2024-02-25', '2024-03-02', 14),
(33, 13, 113, '2024-02-26', '2024-03-03', 8),
(34, 14, 114, '2024-02-27', '2024-03-04', 16),
(35, 15, 115, '2024-02-28', '2024-03-05', 13),
(36, 16, 116, '2024-03-01', '2024-03-06', 20),
(37, 17, 117, '2024-03-02', '2024-03-07', 9),
(38, 18, 118, '2024-03-03', '2024-03-08', 4),
(39, 19, 119, '2024-03-04', '2024-03-09', 21),
(40, 20, 120, '2024-03-05', '2024-03-10', 18),
(41, 1, 101, '2024-03-06', '2024-03-11', 7),
(42, 2, 102, '2024-03-07', '2024-03-12', 11),
(43, 3, 103, '2024-03-08', '2024-03-13', 10),
(44, 4, 104, '2024-03-09', '2024-03-14', 15),
(45, 5, 105, '2024-03-10', '2024-03-15', 17),
(46, 6, 106, '2024-03-11', '2024-03-16', 13),
(47, 7, 107, '2024-03-12', '2024-03-17', 6),
(48, 8, 108, '2024-03-13', '2024-03-18', 9),
(49, 9, 109, '2024-03-14', '2024-03-19', 20),
(50, 10, 110, '2024-03-15', '2024-03-20', 12);

-- INSERTING VALUES INTO THE PRODUCTS TABLE
INSERT INTO PRODUCTS_1 (PRODUCT_ID, PRODUCT_NAME, CATEGORY, UNIT_PRICE)
VALUES
(101, 'Laptop', 'Electronics', 800.00),
(102, 'Smartphone', 'Electronics', 600.00),
(103, 'Tablet', 'Electronics', 300.00),
(104, 'Headphones', 'Accessories', 50.00),
(105, 'Keyboard', 'Accessories', 30.00),
(106, 'Mouse', 'Accessories', 25.00),
(107, 'Smartwatch', 'Wearables', 200.00),
(108, 'Monitor', 'Electronics', 250.00),
(109, 'External Hard Drive', 'Storage', 100.00),
(110, 'USB-C Hub', 'Accessories', 20.00),
(111, 'Gaming Console', 'Gaming', 400.00),
(112, 'Router', 'Networking', 60.00),
(113, 'Bluetooth Speaker', 'Audio', 80.00),
(114, 'VR Headset', 'Gaming', 350.00),
(115, 'Smart Glasses', 'Wearables', 500.00),
(116, 'Action Camera', 'Cameras', 300.00),
(117, 'Drone', 'Cameras', 600.00),
(118, 'Smart Light Bulb', 'Home Automation', 40.00),
(119, 'Electric Kettle', 'Home Appliances', 35.00),
(120, 'Air Fryer', 'Home Appliances', 120.00),
(121, 'Fitness Tracker', 'Wearables', 150.00),
(122, 'Portable Projector', 'Home Entertainment', 450.00),
(123, 'Wireless Charger', 'Accessories', 25.00),
(124, 'XBOX', 'Electronics', 50.00),
(125, 'PS5', 'Electronics', 100.00);

--EXPLORING THE TABLES
SELECT * FROM CUSTOMERS_1;
SELECT * FROM PRODUCTS_1;
SELECT * FROM ORDERS_1;

/*
GET THE TOTAL QUANTITY OF PRODUCTS ORDER BY EACH CUSTOMERS
NEED TO DISPLAY THE ORDER_ID AND CUSTOMER NAME
*/
--USING JOIN
SELECT COALESCE(ORDER_ID,0),CUSTOMER_NAME,
COALESCE(SUM(QUANTITY),0)
FROM ORDERS_1 AS O
RIGHT JOIN CUSTOMERS_1 AS C ON O.CUSTOMER_ID=C.CUSTOMER_ID
GROUP BY ORDER_ID,CUSTOMER_NAME;

--USING CTE
WITH ORDER_QTY_DETAILS AS(
 SELECT CUSTOMER_ID,PRODUCT_ID,SUM(QUANTITY) AS TOTAL_QTY
 FROM ORDERS_1
 GROUP BY CUSTOMER_ID,PRODUCT_ID
 ORDER BY CUSTOMER_ID ASC
)
SELECT C.CUSTOMER_NAME,O.CUSTOMER_ID,O.PRODUCT_ID,PRODUCT_NAME,TOTAL_QTY
FROM CUSTOMERS_1 AS C
    LEFT JOIN
    ORDER_QTY_DETAILS AS O
    ON C.CUSTOMER_ID=O.CUSTOMER_ID
    LEFT JOIN PRODUCTS_1 AS P ON
    O.PRODUCT_ID=P.PRODUCT_ID;

--USING SUBQUERY
SELECT CUSTOMER_ID,CUSTOMER_NAME,P.PRODUCT_NAME,
    (
    SELECT SUM(QUANTITY)
    FROM ORDERS_1 AS O
    WHERE O.CUSTOMER_ID=C.CUSTOMER_ID
    ) AS TPTAL_QTY
FROM CUSTOMERS_1 AS C
JOIN PRODUCTS_1 AS P ON
P.PRODUCT_ID IN(SELECT DISTINCT PRODUCT_ID FROM ORDERS_1 WHERE CUSTOMER_ID=C.CUSTOMER_ID );

/*
LIST THE CUSTOMERS WHO HAVE ORDERED MORE THAN 25 UNITS IN TOTAL
NEED TO DISPLAY CUSTOMER NAME AND THEIR TOTAL SUM OF QUANTITY
*/
--USING CTE
WITH ORDER_QTY AS (
    SELECT CUSTOMER_ID,SUM(QUANTITY) AS TOTAL_QTY
    FROM ORDERS_1
    GROUP BY CUSTOMER_ID
    HAVING TOTAL_QTY >25
    
)
SELECT C.CUSTOMER_NAME,O.CUSTOMER_ID,TOTAL_QTY
FROM ORDER_QTY AS O 
RIGHT JOIN CUSTOMERS_1 AS C
ON O.CUSTOMER_ID=C.CUSTOMER_ID
ORDER BY CUSTOMER_ID ASC;

--USING SUB QUERY
SELECT CUSTOMER_NAME,CUSTOMER_ID,
    (
    SELECT SUM(QUANTITY)
    FROM ORDERS_1 AS O
    WHERE O.CUSTOMER_ID=C.CUSTOMER_ID
        ) AS TOTAL_QTY
FROM CUSTOMERS_1 AS C 
WHERE TOTAL_QTY>25 ;

--USING JOIN
SELECT C.CUSTOMER_ID,C.CUSTOMER_NAME,SUM(QUANTITY) AS TOTAL_QTY
FROM CUSTOMERS_1 AS C
LEFT JOIN
ORDERS_1 AS O ON C.CUSTOMER_ID=O.CUSTOMER_ID
GROUP BY C.CUSTOMER_ID,C.CUSTOMER_NAME
HAVING TOTAL_QTY>25;

/*
FIND ALL THE PRODUCT THAT HAVE NEVER BEEN ORDERED
NEED TO DISPLAY PRODUCT NAME AND PRODUCT ID
*/
WITH PRODUCT_DETAILS AS(
    SELECT P.PRODUCT_NAME,P.PRODUCT_ID
    FROM PRODUCTS_1 AS P RIGHT JOIN
    ORDERS_1 AS O ON P.PRODUCT_ID=O.PRODUCT_ID    
   )
SELECT P.PRODUCT_ID,P.PRODUCT_NAME
FROM PRODUCTS_1 AS P LEFT JOIN
PRODUCT_DETAILS AS PD ON PD.PRODUCT_ID=P.PRODUCT_ID
WHERE PD.PRODUCT_ID IS NULL;
-- 2ND WAY
WITH CTE AS(
    SELECT DISTINCT PRODUCT_ID
    FROM ORDERS_1
)
SELECT PRODUCT_ID,PRODUCT_NAME
FROM PRODUCTS_1
WHERE PRODUCT_ID NOT IN (SELECT PRODUCT_ID FROM CTE );

/*
WRITE A QUERY TO GET THE DETAILS OF LATEST ORDER OF EACH CUSTOMER
NEED TO DISPLAY THE CUSTOMER_ID,CUSTOMER_NAME,PRODUCT_ID,LATEST_ORDER_DATE
*/

SELECT O.CUSTOMER_ID,C.CUSTOMER_NAME,O.PRODUCT_ID,P.PRODUCT_NAME,
LEAD(O.ORDER_DATE) OVER(PARTITION BY C.CUSTOMER_NAME ORDER BY O.ORDER_DATE ASC) AS LATEST_ORDER_DATE
FROM ORDERS_1 AS O JOIN
CUSTOMERS_1 AS C ON O.CUSTOMER_ID=C.CUSTOMER_ID
INNER JOIN PRODUCTS_1 AS P ON P.PRODUCT_ID=O.PRODUCT_ID;

--USING CTE
WITH CTE AS (
    SELECT CUSTOMER_ID,
    PRODUCT_ID,
    MAX(ORDER_DATE) AS LATEST_ORD
    FROM ORDERS_1 
    GROUP BY CUSTOMER_ID,PRODUCT_ID
)
SELECT CUS.CUSTOMER_NAME,C.CUSTOMER_ID,P.PRODUCT_ID,P.PRODUCT_NAME,LATEST_ORD
FROM CTE AS C JOIN
CUSTOMERS_1 AS CUS ON CUS.CUSTOMER_ID=C.CUSTOMER_ID
JOIN PRODUCTS_1 AS P ON P.PRODUCT_ID=C.PRODUCT_ID
;




SELECT *
FROM PRODUCTS_1;


SELECT *
FROM ORDERS_1;








